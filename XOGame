using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Game50
{
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        KeyboardState Mykey;
        Texture2D Back;
        Texture2D[] X, O;
        Vector2[] Xpos, Opos;
      



        int Xindex = 0, Oindex = 0;
        int time;

        bool Xplay, Oplay;
        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here
            graphics.PreferredBackBufferHeight = 600;
            graphics.PreferredBackBufferWidth = 800;
            graphics.ApplyChanges();
            Xplay = true;
            Oplay = false;

            X = new Texture2D[9];
            O = new Texture2D[9];

            Xpos = new Vector2[9];
            Opos = new Vector2[9];

            time = 0;

            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);
            Back = Content.Load<Texture2D>("Image/background");

            for (int i = 0; i < 9; i++)
            {
                X[i] = Content.Load<Texture2D>("Image/X");
                O[i] = Content.Load<Texture2D>("Image/O");
            }
            // TODO: use this.Content to load your game content here
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            // Allows the game to exit
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)
                this.Exit();
          
            

            Mykey = Keyboard.GetState();
            if (time == 0 || (int)gameTime.TotalGameTime.TotalSeconds > time)
            {
                time = (int)gameTime.TotalGameTime.TotalSeconds;
            }

            if (Mykey.IsKeyDown(Keys.NumPad0) && time == (int)gameTime.TotalGameTime.TotalSeconds)
            {
                if (Xplay)
                {
                    Xpos[Xindex] = new Vector2(0 , 0);
                    Xindex++;
                    //Oindex = 0;
                    Xplay = false;
                    Oplay = true;
                }
                else if (Oplay)
                {
                    Opos[Oindex] = new Vector2(0 , 0);
                    Oindex++;
                    //Xindex = 0;
                    Xplay = true;
                    Oplay = false;
                }
                time++;
            }
            else if (Mykey.IsKeyDown(Keys.NumPad1) && time == (int)gameTime.TotalGameTime.TotalSeconds)
            {
                if (Xplay == true)
                {
                    Xpos[Xindex] = new Vector2(200, 0);
                    Xindex++;
                   // Oindex = 0;
                    Xplay = false;
                    Oplay = true;
                }
                else if (Oplay)
                {
                    Opos[Oindex] = new Vector2(200, 0);
                    Oindex++;
                    //Xindex = 0;
                    Oplay = false;
                    Xplay = true;
                }
                time++;
            }
            else if (Mykey.IsKeyDown(Keys.NumPad2) && time == (int)gameTime.TotalGameTime.TotalSeconds)
            {
                if (Xplay == true)
                {
                    Xpos[Xindex] = new Vector2(400, 0);
                    Xindex++;
                   // Oindex = 0;
                    Xplay = false;
                    Oplay = true;
                }
                else if (Oplay)
                {
                    Opos[Oindex] = new Vector2(400, 0);
                    Oindex++;
                   // Xindex = 0;
                    Oplay = false;
                    Xplay = true;
                }
                time++;
            }
            else if (Mykey.IsKeyDown(Keys.NumPad3) && time == (int)gameTime.TotalGameTime.TotalSeconds)
            {
                if (Xplay == true)
                {
                    Xpos[Xindex] = new Vector2(0, 200);
                    Xindex++;
                    // Oindex = 0;
                    Xplay = false;
                    Oplay = true;
                }
                else if (Oplay)
                {
                    Opos[Oindex] = new Vector2(0, 200);
                    Oindex++;
                    // Xindex = 0;
                    Oplay = false;
                    Xplay = true;
                }
                time++;
            }
            else if (Mykey.IsKeyDown(Keys.NumPad4) && time == (int)gameTime.TotalGameTime.TotalSeconds)
            {
                if (Xplay == true)
                {
                    Xpos[Xindex] = new Vector2(200, 200);
                    Xindex++;
                    // Oindex = 0;
                    Xplay = false;
                    Oplay = true;
                }
                else if (Oplay)
                {
                    Opos[Oindex] = new Vector2(200,200);
                    Oindex++;
                    // Xindex = 0;
                    Oplay = false;
                    Xplay = true;
                }
                time++;
            }
            else if (Mykey.IsKeyDown(Keys.NumPad5) && time == (int)gameTime.TotalGameTime.TotalSeconds)
            {
                if (Xplay == true)
                {
                    Xpos[Xindex] = new Vector2(400, 200);
                    Xindex++;
                    // Oindex = 0;
                    Xplay = false;
                    Oplay = true;
                }
                else if (Oplay)
                {
                    Opos[Oindex] = new Vector2(400, 200);
                    Oindex++;
                    // Xindex = 0;
                    Oplay = false;
                    Xplay = true;
                }
                time++;
            }
            else if (Mykey.IsKeyDown(Keys.NumPad6) && time == (int)gameTime.TotalGameTime.TotalSeconds)
            {
                if (Xplay == true)
                {
                    Xpos[Xindex] = new Vector2(0, 400);
                    Xindex++;
                    // Oindex = 0;
                    Xplay = false;
                    Oplay = true;
                }
                else if (Oplay)
                {
                    Opos[Oindex] = new Vector2(0, 400);
                    Oindex++;
                    // Xindex = 0;
                    Oplay = false;
                    Xplay = true;
                }
                time++;
            }
            else if (Mykey.IsKeyDown(Keys.NumPad7) && time == (int)gameTime.TotalGameTime.TotalSeconds)
            {
                if (Xplay == true)
                {
                    Xpos[Xindex] = new Vector2(200, 400);
                    Xindex++;
                    // Oindex = 0;
                    Xplay = false;
                    Oplay = true;
                }
                else if (Oplay)
                {
                    Opos[Oindex] = new Vector2(200, 400);
                    Oindex++;
                    // Xindex = 0;
                    Oplay = false;
                    Xplay = true;
                }
                time++;
            }
            else if (Mykey.IsKeyDown(Keys.NumPad8) && time == (int)gameTime.TotalGameTime.TotalSeconds)
            {
                if (Xplay == true)
                {
                    Xpos[Xindex] = new Vector2(400, 400);
                    Xindex++;
                    // Oindex = 0;
                    Xplay = false;
                    Oplay = true;
                }
                else if (Oplay)
                {
                    Opos[Oindex] = new Vector2(400, 400);
                    Oindex++;
                    // Xindex = 0;
                    Oplay = false;
                    Xplay = true;
                }
                time++;
            }
            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            // TODO: Add your drawing code here

            spriteBatch.Begin();


            spriteBatch.Draw(Back , new Vector2(0 ,0) , Color.White );

            for (int i = 0; i < Xindex; i++)
                spriteBatch.Draw(X[i] , Xpos[i] , Color.White);

            for (int i = 0; i < Oindex; i++)
                spriteBatch.Draw(O[i] ,Opos[i], Color.White );


                spriteBatch.End();

            base.Draw(gameTime);
        }
    }
}
